### Instruction for Traffic Light Intersection Controller

#### Role Overview
Your role is to configure and optimize the timing of a traffic light intersection. The intersection has the following states:

- **GREEN1_RED2**: Traffic Light 1 is Green, Traffic Light 2 is Red
- **YELLOW1_RED2**: Traffic Light 1 is Yellow, Traffic Light 2 is Red
- **RED1_GREEN2**: Traffic Light 1 is Red, Traffic Light 2 is Green
- **RED1_YELLOW2**: Traffic Light 1 is Red, Traffic Light 2 is Yellow
- **BLINKING**: Both Traffic Lights are Blinking (e.g., for maintenance or low traffic periods)

Each state has an associated `stateDuration` representing the time (in milliseconds) that the intersection remains in that state. Also related to the timing, 
there are 7 variables that define the timing of the states with their default values:

GREEN_TIME1 = 3500     
YELLOW_TIME1 = 500     
RED_TIME1 = 4000       
GREEN_TIME2 = 3500     
YELLOW_TIME2 = 500     
RED_TIME2 = 4000       
BLINKING_DURATION = 500

#### Input
The input to your function will be a JSON object containing information about the traffic lights at the intersection. The input structure is as follows:
```json
{
    \"trafficLights\": [
        {
            \"trafficLightId\": 1,
            \"totalOfVehicles\": 0,
            \"isDaytime\": true,
            \"co2Level\": 629.9199
        },
        {
            \"trafficLightId\": 2,
            \"totalOfVehicles\": 0,
            \"isDaytime\": true,
            \"co2Level\": 0
        }
    ]
}
```
- **trafficLightId**: Unique identifier for the traffic light.
- **totalOfVehicles**: Number of vehicles currently at the traffic light.
- **isDaytime**: Boolean indicating if it is daytime.
- **co2Level**: Current CO2 level at the traffic light location.

#### Output
Your should return a JSON object with the following structure:
{
    \"states\": {
        \"GREEN_TIME1\": 0,
        \"YELLOW_TIME1\": 0,
        \"RED_TIME1\": 0,
        \"GREEN_TIME2\": 0,
        \"YELLOW_TIME2\": 0,
        \"RED_TIME2\": 0,
        \"BLINKING_DURATION\": 0
    },
    \"pedestrianReduction\": 0,
    \"vehicleCount\": {
        \"diff1\": 0,
        \"diff2\": 0,
        \"diff3\": 0
    }
}

- **states**: Dictionary with the state names as keys and their respective durations in milliseconds as values. No value should be 0.
- **pedestrianReduction**: Time (in milliseconds) reduced from the green state when a pedestrian presses the pedestrian button. No value should be 0.
- **vehicleCount**: Dictionary indicating the duration multiplier (e.g., 1.2 for 20%) based on the vehicle count difference across three consecutive cycles at Traffic Light 1 (`diff1`), Traffic Light 2 (`diff2`), and the overall intersection (`diff3`). No value should be 0.

#### Optimization Objectives
1. **Minimize CO2 Levels**: Adjust state durations to reduce CO2 levels.
2. **Balance Traffic Flow**: Ensure smooth traffic flow by considering the total number of vehicles at each traffic light using the vehicleCount diff variables.
3. **Daytime/Nighttime Adjustment**: Optimize timings based on whether it is daytime or nighttime.
4. **Vehicle Count Adjustment**: Adjust green light duration based on the vehicle count multiplier to accommodate traffic flow effectively.

Return only the expected JSON output with all durations in milliseconds.